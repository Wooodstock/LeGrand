//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34003
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Legrand.ServiceLegrand {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Home", Namespace="http://schemas.datacontract.org/2004/07/OpenWebNetDataContract.Model")]
    public partial class Home : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private System.Collections.ObjectModel.ObservableCollection<Legrand.ServiceLegrand.Room> roomsField;
        
        private float surfaceField;
        
        private float volumeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Legrand.ServiceLegrand.Room> rooms {
            get {
                return this.roomsField;
            }
            set {
                if ((object.ReferenceEquals(this.roomsField, value) != true)) {
                    this.roomsField = value;
                    this.RaisePropertyChanged("rooms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float surface {
            get {
                return this.surfaceField;
            }
            set {
                if ((this.surfaceField.Equals(value) != true)) {
                    this.surfaceField = value;
                    this.RaisePropertyChanged("surface");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float volume {
            get {
                return this.volumeField;
            }
            set {
                if ((this.volumeField.Equals(value) != true)) {
                    this.volumeField = value;
                    this.RaisePropertyChanged("volume");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Room", Namespace="http://schemas.datacontract.org/2004/07/OpenWebNetDataContract.Model")]
    public partial class Room : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Legrand.ServiceLegrand.Consumption consumptionField;
        
        private System.Collections.ObjectModel.ObservableCollection<Legrand.ServiceLegrand.Equipment> equipmentsField;
        
        private int idField;
        
        private string nameField;
        
        private float surfaceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Legrand.ServiceLegrand.Consumption consumption {
            get {
                return this.consumptionField;
            }
            set {
                if ((object.ReferenceEquals(this.consumptionField, value) != true)) {
                    this.consumptionField = value;
                    this.RaisePropertyChanged("consumption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Legrand.ServiceLegrand.Equipment> equipments {
            get {
                return this.equipmentsField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmentsField, value) != true)) {
                    this.equipmentsField = value;
                    this.RaisePropertyChanged("equipments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float surface {
            get {
                return this.surfaceField;
            }
            set {
                if ((this.surfaceField.Equals(value) != true)) {
                    this.surfaceField = value;
                    this.RaisePropertyChanged("surface");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Consumption", Namespace="http://schemas.datacontract.org/2004/07/OpenWebNetDataContract.Model")]
    public partial class Consumption : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string electricalField;
        
        private string gazField;
        
        private int idField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string electrical {
            get {
                return this.electricalField;
            }
            set {
                if ((object.ReferenceEquals(this.electricalField, value) != true)) {
                    this.electricalField = value;
                    this.RaisePropertyChanged("electrical");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string gaz {
            get {
                return this.gazField;
            }
            set {
                if ((object.ReferenceEquals(this.gazField, value) != true)) {
                    this.gazField = value;
                    this.RaisePropertyChanged("gaz");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Equipment", Namespace="http://schemas.datacontract.org/2004/07/OpenWebNetDataContract.Model")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Legrand.ServiceLegrand.Radiator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Legrand.ServiceLegrand.Shutter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Legrand.ServiceLegrand.Light))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Legrand.ServiceLegrand.Alarm))]
    public partial class Equipment : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private int numberField;
        
        private bool stateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int number {
            get {
                return this.numberField;
            }
            set {
                if ((this.numberField.Equals(value) != true)) {
                    this.numberField = value;
                    this.RaisePropertyChanged("number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool state {
            get {
                return this.stateField;
            }
            set {
                if ((this.stateField.Equals(value) != true)) {
                    this.stateField = value;
                    this.RaisePropertyChanged("state");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Radiator", Namespace="http://schemas.datacontract.org/2004/07/OpenWebNetDataContract.Model")]
    public partial class Radiator : Legrand.ServiceLegrand.Equipment {
        
        private float temperatureField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float temperature {
            get {
                return this.temperatureField;
            }
            set {
                if ((this.temperatureField.Equals(value) != true)) {
                    this.temperatureField = value;
                    this.RaisePropertyChanged("temperature");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Shutter", Namespace="http://schemas.datacontract.org/2004/07/OpenWebNetDataContract.Model")]
    public partial class Shutter : Legrand.ServiceLegrand.Equipment {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Light", Namespace="http://schemas.datacontract.org/2004/07/OpenWebNetDataContract.Model")]
    public partial class Light : Legrand.ServiceLegrand.Equipment {
        
        private int IntensityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Intensity {
            get {
                return this.IntensityField;
            }
            set {
                if ((this.IntensityField.Equals(value) != true)) {
                    this.IntensityField = value;
                    this.RaisePropertyChanged("Intensity");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alarm", Namespace="http://schemas.datacontract.org/2004/07/OpenWebNetDataContract.Model")]
    public partial class Alarm : Legrand.ServiceLegrand.Equipment {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceLegrand.IServiceLegrand")]
    public interface IServiceLegrand {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceLegrand/serviceHome", ReplyAction="http://tempuri.org/IServiceLegrand/serviceHomeResponse")]
        System.IAsyncResult BeginserviceHome(string order, Legrand.ServiceLegrand.Home home, System.Collections.Generic.Dictionary<object, object> dico, System.AsyncCallback callback, object asyncState);
        
        Legrand.ServiceLegrand.Home EndserviceHome(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceLegrand/serviceEquipment", ReplyAction="http://tempuri.org/IServiceLegrand/serviceEquipmentResponse")]
        System.IAsyncResult BeginserviceEquipment(string order, Legrand.ServiceLegrand.Home home, System.Collections.Generic.Dictionary<object, object> dico, System.AsyncCallback callback, object asyncState);
        
        Legrand.ServiceLegrand.Equipment EndserviceEquipment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceLegrand/getMot", ReplyAction="http://tempuri.org/IServiceLegrand/getMotResponse")]
        System.IAsyncResult BegingetMot(System.AsyncCallback callback, object asyncState);
        
        string EndgetMot(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceLegrandChannel : Legrand.ServiceLegrand.IServiceLegrand, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class serviceHomeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public serviceHomeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Legrand.ServiceLegrand.Home Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Legrand.ServiceLegrand.Home)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class serviceEquipmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public serviceEquipmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Legrand.ServiceLegrand.Equipment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Legrand.ServiceLegrand.Equipment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getMotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getMotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceLegrandClient : System.ServiceModel.ClientBase<Legrand.ServiceLegrand.IServiceLegrand>, Legrand.ServiceLegrand.IServiceLegrand {
        
        private BeginOperationDelegate onBeginserviceHomeDelegate;
        
        private EndOperationDelegate onEndserviceHomeDelegate;
        
        private System.Threading.SendOrPostCallback onserviceHomeCompletedDelegate;
        
        private BeginOperationDelegate onBeginserviceEquipmentDelegate;
        
        private EndOperationDelegate onEndserviceEquipmentDelegate;
        
        private System.Threading.SendOrPostCallback onserviceEquipmentCompletedDelegate;
        
        private BeginOperationDelegate onBegingetMotDelegate;
        
        private EndOperationDelegate onEndgetMotDelegate;
        
        private System.Threading.SendOrPostCallback ongetMotCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceLegrandClient() {
        }
        
        public ServiceLegrandClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceLegrandClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLegrandClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLegrandClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<serviceHomeCompletedEventArgs> serviceHomeCompleted;
        
        public event System.EventHandler<serviceEquipmentCompletedEventArgs> serviceEquipmentCompleted;
        
        public event System.EventHandler<getMotCompletedEventArgs> getMotCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Legrand.ServiceLegrand.IServiceLegrand.BeginserviceHome(string order, Legrand.ServiceLegrand.Home home, System.Collections.Generic.Dictionary<object, object> dico, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginserviceHome(order, home, dico, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Legrand.ServiceLegrand.Home Legrand.ServiceLegrand.IServiceLegrand.EndserviceHome(System.IAsyncResult result) {
            return base.Channel.EndserviceHome(result);
        }
        
        private System.IAsyncResult OnBeginserviceHome(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string order = ((string)(inValues[0]));
            Legrand.ServiceLegrand.Home home = ((Legrand.ServiceLegrand.Home)(inValues[1]));
            System.Collections.Generic.Dictionary<object, object> dico = ((System.Collections.Generic.Dictionary<object, object>)(inValues[2]));
            return ((Legrand.ServiceLegrand.IServiceLegrand)(this)).BeginserviceHome(order, home, dico, callback, asyncState);
        }
        
        private object[] OnEndserviceHome(System.IAsyncResult result) {
            Legrand.ServiceLegrand.Home retVal = ((Legrand.ServiceLegrand.IServiceLegrand)(this)).EndserviceHome(result);
            return new object[] {
                    retVal};
        }
        
        private void OnserviceHomeCompleted(object state) {
            if ((this.serviceHomeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.serviceHomeCompleted(this, new serviceHomeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void serviceHomeAsync(string order, Legrand.ServiceLegrand.Home home, System.Collections.Generic.Dictionary<object, object> dico) {
            this.serviceHomeAsync(order, home, dico, null);
        }
        
        public void serviceHomeAsync(string order, Legrand.ServiceLegrand.Home home, System.Collections.Generic.Dictionary<object, object> dico, object userState) {
            if ((this.onBeginserviceHomeDelegate == null)) {
                this.onBeginserviceHomeDelegate = new BeginOperationDelegate(this.OnBeginserviceHome);
            }
            if ((this.onEndserviceHomeDelegate == null)) {
                this.onEndserviceHomeDelegate = new EndOperationDelegate(this.OnEndserviceHome);
            }
            if ((this.onserviceHomeCompletedDelegate == null)) {
                this.onserviceHomeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnserviceHomeCompleted);
            }
            base.InvokeAsync(this.onBeginserviceHomeDelegate, new object[] {
                        order,
                        home,
                        dico}, this.onEndserviceHomeDelegate, this.onserviceHomeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Legrand.ServiceLegrand.IServiceLegrand.BeginserviceEquipment(string order, Legrand.ServiceLegrand.Home home, System.Collections.Generic.Dictionary<object, object> dico, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginserviceEquipment(order, home, dico, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Legrand.ServiceLegrand.Equipment Legrand.ServiceLegrand.IServiceLegrand.EndserviceEquipment(System.IAsyncResult result) {
            return base.Channel.EndserviceEquipment(result);
        }
        
        private System.IAsyncResult OnBeginserviceEquipment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string order = ((string)(inValues[0]));
            Legrand.ServiceLegrand.Home home = ((Legrand.ServiceLegrand.Home)(inValues[1]));
            System.Collections.Generic.Dictionary<object, object> dico = ((System.Collections.Generic.Dictionary<object, object>)(inValues[2]));
            return ((Legrand.ServiceLegrand.IServiceLegrand)(this)).BeginserviceEquipment(order, home, dico, callback, asyncState);
        }
        
        private object[] OnEndserviceEquipment(System.IAsyncResult result) {
            Legrand.ServiceLegrand.Equipment retVal = ((Legrand.ServiceLegrand.IServiceLegrand)(this)).EndserviceEquipment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnserviceEquipmentCompleted(object state) {
            if ((this.serviceEquipmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.serviceEquipmentCompleted(this, new serviceEquipmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void serviceEquipmentAsync(string order, Legrand.ServiceLegrand.Home home, System.Collections.Generic.Dictionary<object, object> dico) {
            this.serviceEquipmentAsync(order, home, dico, null);
        }
        
        public void serviceEquipmentAsync(string order, Legrand.ServiceLegrand.Home home, System.Collections.Generic.Dictionary<object, object> dico, object userState) {
            if ((this.onBeginserviceEquipmentDelegate == null)) {
                this.onBeginserviceEquipmentDelegate = new BeginOperationDelegate(this.OnBeginserviceEquipment);
            }
            if ((this.onEndserviceEquipmentDelegate == null)) {
                this.onEndserviceEquipmentDelegate = new EndOperationDelegate(this.OnEndserviceEquipment);
            }
            if ((this.onserviceEquipmentCompletedDelegate == null)) {
                this.onserviceEquipmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnserviceEquipmentCompleted);
            }
            base.InvokeAsync(this.onBeginserviceEquipmentDelegate, new object[] {
                        order,
                        home,
                        dico}, this.onEndserviceEquipmentDelegate, this.onserviceEquipmentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Legrand.ServiceLegrand.IServiceLegrand.BegingetMot(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetMot(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Legrand.ServiceLegrand.IServiceLegrand.EndgetMot(System.IAsyncResult result) {
            return base.Channel.EndgetMot(result);
        }
        
        private System.IAsyncResult OnBegingetMot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Legrand.ServiceLegrand.IServiceLegrand)(this)).BegingetMot(callback, asyncState);
        }
        
        private object[] OnEndgetMot(System.IAsyncResult result) {
            string retVal = ((Legrand.ServiceLegrand.IServiceLegrand)(this)).EndgetMot(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetMotCompleted(object state) {
            if ((this.getMotCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getMotCompleted(this, new getMotCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getMotAsync() {
            this.getMotAsync(null);
        }
        
        public void getMotAsync(object userState) {
            if ((this.onBegingetMotDelegate == null)) {
                this.onBegingetMotDelegate = new BeginOperationDelegate(this.OnBegingetMot);
            }
            if ((this.onEndgetMotDelegate == null)) {
                this.onEndgetMotDelegate = new EndOperationDelegate(this.OnEndgetMot);
            }
            if ((this.ongetMotCompletedDelegate == null)) {
                this.ongetMotCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetMotCompleted);
            }
            base.InvokeAsync(this.onBegingetMotDelegate, null, this.onEndgetMotDelegate, this.ongetMotCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Legrand.ServiceLegrand.IServiceLegrand CreateChannel() {
            return new ServiceLegrandClientChannel(this);
        }
        
        private class ServiceLegrandClientChannel : ChannelBase<Legrand.ServiceLegrand.IServiceLegrand>, Legrand.ServiceLegrand.IServiceLegrand {
            
            public ServiceLegrandClientChannel(System.ServiceModel.ClientBase<Legrand.ServiceLegrand.IServiceLegrand> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginserviceHome(string order, Legrand.ServiceLegrand.Home home, System.Collections.Generic.Dictionary<object, object> dico, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = order;
                _args[1] = home;
                _args[2] = dico;
                System.IAsyncResult _result = base.BeginInvoke("serviceHome", _args, callback, asyncState);
                return _result;
            }
            
            public Legrand.ServiceLegrand.Home EndserviceHome(System.IAsyncResult result) {
                object[] _args = new object[0];
                Legrand.ServiceLegrand.Home _result = ((Legrand.ServiceLegrand.Home)(base.EndInvoke("serviceHome", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginserviceEquipment(string order, Legrand.ServiceLegrand.Home home, System.Collections.Generic.Dictionary<object, object> dico, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = order;
                _args[1] = home;
                _args[2] = dico;
                System.IAsyncResult _result = base.BeginInvoke("serviceEquipment", _args, callback, asyncState);
                return _result;
            }
            
            public Legrand.ServiceLegrand.Equipment EndserviceEquipment(System.IAsyncResult result) {
                object[] _args = new object[0];
                Legrand.ServiceLegrand.Equipment _result = ((Legrand.ServiceLegrand.Equipment)(base.EndInvoke("serviceEquipment", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetMot(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getMot", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetMot(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getMot", _args, result)));
                return _result;
            }
        }
    }
}
