//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34003
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Legrand.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HasSomeData", Namespace="http://schemas.datacontract.org/2004/07/WCFDataContract")]
    public partial class HasSomeData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Legrand.ServiceReference1.Data myDataField;
        
        private string nameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Legrand.ServiceReference1.Data myData {
            get {
                return this.myDataField;
            }
            set {
                if ((object.ReferenceEquals(this.myDataField, value) != true)) {
                    this.myDataField = value;
                    this.RaisePropertyChanged("myData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Data", Namespace="http://schemas.datacontract.org/2004/07/WCFDataContract")]
    public partial class Data : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string destField;
        
        private int idField;
        
        private string msgField;
        
        private string nameField;
        
        private string originField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string dest {
            get {
                return this.destField;
            }
            set {
                if ((object.ReferenceEquals(this.destField, value) != true)) {
                    this.destField = value;
                    this.RaisePropertyChanged("dest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string msg {
            get {
                return this.msgField;
            }
            set {
                if ((object.ReferenceEquals(this.msgField, value) != true)) {
                    this.msgField = value;
                    this.RaisePropertyChanged("msg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string origin {
            get {
                return this.originField;
            }
            set {
                if ((object.ReferenceEquals(this.originField, value) != true)) {
                    this.originField = value;
                    this.RaisePropertyChanged("origin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.MsgInterface")]
    public interface MsgInterface {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/MsgInterface/acknowledge", ReplyAction="http://tempuri.org/MsgInterface/acknowledgeResponse")]
        System.IAsyncResult Beginacknowledge(string trunkedCcNumber, System.AsyncCallback callback, object asyncState);
        
        void Endacknowledge(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/MsgInterface/getTheData", ReplyAction="http://tempuri.org/MsgInterface/getTheDataResponse")]
        System.IAsyncResult BegingetTheData(System.AsyncCallback callback, object asyncState);
        
        Legrand.ServiceReference1.HasSomeData EndgetTheData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MsgInterfaceChannel : Legrand.ServiceReference1.MsgInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getTheDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getTheDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Legrand.ServiceReference1.HasSomeData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Legrand.ServiceReference1.HasSomeData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MsgInterfaceClient : System.ServiceModel.ClientBase<Legrand.ServiceReference1.MsgInterface>, Legrand.ServiceReference1.MsgInterface {
        
        private BeginOperationDelegate onBeginacknowledgeDelegate;
        
        private EndOperationDelegate onEndacknowledgeDelegate;
        
        private System.Threading.SendOrPostCallback onacknowledgeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetTheDataDelegate;
        
        private EndOperationDelegate onEndgetTheDataDelegate;
        
        private System.Threading.SendOrPostCallback ongetTheDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MsgInterfaceClient() {
        }
        
        public MsgInterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MsgInterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MsgInterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MsgInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> acknowledgeCompleted;
        
        public event System.EventHandler<getTheDataCompletedEventArgs> getTheDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Legrand.ServiceReference1.MsgInterface.Beginacknowledge(string trunkedCcNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginacknowledge(trunkedCcNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Legrand.ServiceReference1.MsgInterface.Endacknowledge(System.IAsyncResult result) {
            base.Channel.Endacknowledge(result);
        }
        
        private System.IAsyncResult OnBeginacknowledge(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string trunkedCcNumber = ((string)(inValues[0]));
            return ((Legrand.ServiceReference1.MsgInterface)(this)).Beginacknowledge(trunkedCcNumber, callback, asyncState);
        }
        
        private object[] OnEndacknowledge(System.IAsyncResult result) {
            ((Legrand.ServiceReference1.MsgInterface)(this)).Endacknowledge(result);
            return null;
        }
        
        private void OnacknowledgeCompleted(object state) {
            if ((this.acknowledgeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.acknowledgeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void acknowledgeAsync(string trunkedCcNumber) {
            this.acknowledgeAsync(trunkedCcNumber, null);
        }
        
        public void acknowledgeAsync(string trunkedCcNumber, object userState) {
            if ((this.onBeginacknowledgeDelegate == null)) {
                this.onBeginacknowledgeDelegate = new BeginOperationDelegate(this.OnBeginacknowledge);
            }
            if ((this.onEndacknowledgeDelegate == null)) {
                this.onEndacknowledgeDelegate = new EndOperationDelegate(this.OnEndacknowledge);
            }
            if ((this.onacknowledgeCompletedDelegate == null)) {
                this.onacknowledgeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnacknowledgeCompleted);
            }
            base.InvokeAsync(this.onBeginacknowledgeDelegate, new object[] {
                        trunkedCcNumber}, this.onEndacknowledgeDelegate, this.onacknowledgeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Legrand.ServiceReference1.MsgInterface.BegingetTheData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetTheData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Legrand.ServiceReference1.HasSomeData Legrand.ServiceReference1.MsgInterface.EndgetTheData(System.IAsyncResult result) {
            return base.Channel.EndgetTheData(result);
        }
        
        private System.IAsyncResult OnBegingetTheData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Legrand.ServiceReference1.MsgInterface)(this)).BegingetTheData(callback, asyncState);
        }
        
        private object[] OnEndgetTheData(System.IAsyncResult result) {
            Legrand.ServiceReference1.HasSomeData retVal = ((Legrand.ServiceReference1.MsgInterface)(this)).EndgetTheData(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetTheDataCompleted(object state) {
            if ((this.getTheDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getTheDataCompleted(this, new getTheDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getTheDataAsync() {
            this.getTheDataAsync(null);
        }
        
        public void getTheDataAsync(object userState) {
            if ((this.onBegingetTheDataDelegate == null)) {
                this.onBegingetTheDataDelegate = new BeginOperationDelegate(this.OnBegingetTheData);
            }
            if ((this.onEndgetTheDataDelegate == null)) {
                this.onEndgetTheDataDelegate = new EndOperationDelegate(this.OnEndgetTheData);
            }
            if ((this.ongetTheDataCompletedDelegate == null)) {
                this.ongetTheDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetTheDataCompleted);
            }
            base.InvokeAsync(this.onBegingetTheDataDelegate, null, this.onEndgetTheDataDelegate, this.ongetTheDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Legrand.ServiceReference1.MsgInterface CreateChannel() {
            return new MsgInterfaceClientChannel(this);
        }
        
        private class MsgInterfaceClientChannel : ChannelBase<Legrand.ServiceReference1.MsgInterface>, Legrand.ServiceReference1.MsgInterface {
            
            public MsgInterfaceClientChannel(System.ServiceModel.ClientBase<Legrand.ServiceReference1.MsgInterface> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult Beginacknowledge(string trunkedCcNumber, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trunkedCcNumber;
                System.IAsyncResult _result = base.BeginInvoke("acknowledge", _args, callback, asyncState);
                return _result;
            }
            
            public void Endacknowledge(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("acknowledge", _args, result);
            }
            
            public System.IAsyncResult BegingetTheData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getTheData", _args, callback, asyncState);
                return _result;
            }
            
            public Legrand.ServiceReference1.HasSomeData EndgetTheData(System.IAsyncResult result) {
                object[] _args = new object[0];
                Legrand.ServiceReference1.HasSomeData _result = ((Legrand.ServiceReference1.HasSomeData)(base.EndInvoke("getTheData", _args, result)));
                return _result;
            }
        }
    }
}
